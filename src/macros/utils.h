/**
 * @file preproc.h
 * @author Aleksander Kovalchuk (aliaksander.kavalchuk@gmail.com)
 * @brief 
 * @date 2022-05-22
 */

#pragma once

/* C++ detection */
#ifdef __cplusplus
extern "C" {
#endif

//_____ I N C L U D E S _______________________________________________________
#include "environment/host.h"
//_____ C O N F I G S  ________________________________________________________

//_____ D E F I N I T I O N S _________________________________________________

//_____ M A C R O S ___________________________________________________________
/**
 * \brief           Gets the number of elements in an array.
 * \param[in]       array: pointer to array
 * \return          number of elements.
 * \hideinitializer
 */
#define ARRAY_SIZE(array) 			        (sizeof(array)/sizeof((array)[0]))

/**
 * \brief           This macro calculates the offset into a structure of a particular member.
 *                  Most compilers have this built in, or as part of stddef.h, but
 *                  just when you need it, it isn't there.
 * 
 * \param[in]       _t: type of structure wrapping (containing) the pointer
 * \param[in]       _m: name of the field to which pointer points inside the structure
 * \return          member offset into a structure.
 * \hideinitializer
 */
#ifndef offsetof
#define offsetof(_t, _m)                    ((size_t) &((_t *) 0)->_m)
#endif

/**
 * \brief           This macro can be used to return a pointer to a top-level structure
 *                  given a pointer to an intermediate value.
 * 
 * \param[in]       _p: the pointer to the field in the structure
 * \param[in]       _t: type of structure wrapping (containing) the pointer
 * \param[in]       _m: name of the field to which pointer points inside the structure
 * \return          a pointer to a top-level structure.
 * \hideinitializer
 */
#ifndef container_of
#define container_of(_p, _t, _m) \
    ({                                                                      \
         const __typeof__(((_t *) 0)->_m) * __mptr = (_p);                  \
         (_t *) ((char *) __mptr - offsetof(_t, _m));                       \
     })
#endif

   
/**
 * \brief           The defines below are useful for concatenating text using the preprocessor
 *                  Specifically, if one of the strings is generated by the preprocessor 
 *                  (e.g. __LINE__), these will do the right thing.
 * \param[in]       _x: 
 * \param[in]       _y: 
 * \return          
 * \hideinitializer
 */
#define PASTE2(_x, _y)                          _x ## _y
#define PASTE(_x, _y)                           PASTE2(_x, _y)

/**
 * \brief           Define name of current source file
 *  
 */
#ifdef strrchr
#define __FILENAME__ (strrchr(__FILE__, FILE_SPLITTER) ? strrchr(__FILE__, FILE_SPLITTER) + 1 : __FILE__)
#else
#define _STRIPPATH(s)\
    (sizeof(s) > 2 && (s)[sizeof(s)-2] == FILE_SPLITTER ? (s) + sizeof(s) - 1 : \
    sizeof(s) > 3 && (s)[sizeof(s)-3] == FILE_SPLITTER ? (s) + sizeof(s) - 2 : \
    sizeof(s) > 4 && (s)[sizeof(s)-4] == FILE_SPLITTER ? (s) + sizeof(s) - 3 : \
    sizeof(s) > 5 && (s)[sizeof(s)-5] == FILE_SPLITTER ? (s) + sizeof(s) - 4 : \
    sizeof(s) > 6 && (s)[sizeof(s)-6] == FILE_SPLITTER ? (s) + sizeof(s) - 5 : \
    sizeof(s) > 7 && (s)[sizeof(s)-7] == FILE_SPLITTER ? (s) + sizeof(s) - 6 : \
    sizeof(s) > 8 && (s)[sizeof(s)-8] == FILE_SPLITTER ? (s) + sizeof(s) - 7 : \
    sizeof(s) > 9 && (s)[sizeof(s)-9] == FILE_SPLITTER ? (s) + sizeof(s) - 8 : \
    sizeof(s) > 10 && (s)[sizeof(s)-10] == FILE_SPLITTER ? (s) + sizeof(s) - 9 : \
    sizeof(s) > 11 && (s)[sizeof(s)-11] == FILE_SPLITTER ? (s) + sizeof(s) - 10 : (s))

#define __FILENAME__                    _STRIPPATH(__FILE__)
#endif
//_____ V A R I A B L E S _____________________________________________________

//_____ P U B L I C  F U N C T I O N S_________________________________________

/* C++ detection */
#ifdef __cplusplus
}
#endif
